enum Место_дырки {СПРАВА, СЛЕВА, СВЕРХУ, СНИЗУ, ДЫРКИ_РЯДОМ_НЕТ}

type Фишки {
	int номер
	int место
}

type Дырка {
	int место
}

rule Перемещение_фишки(Место_дырки куда_перемещать, int на_сколько_перемещать) {
	relevant _фишка = Фишки.all.filter[где_дырка(место) == куда_перемещать].any
	relevant _дырка = Дырка.any

	def execute() {
		_фишка.место = _фишка.место + на_сколько_перемещать;
		_дырка.место = _дырка.место - на_сколько_перемещать;
	}
}

constant длина_поля = 3;

int Ряд(int место) {
	return (место - 1 ) / длина_поля + 1;
}

int Столбец(int место) {
	return (место - 1) % длина_поля + 1
}

Место_дырки где_дырка(int место) {
	if (Столбец(место) == Столбец(дырка.место) && Ряд(место) == Ряд(дырка.место) + 1)
		return Место_дырки.СВЕРХУ

	if (Столбец(место) == Столбец(дырка.место) && Ряд(место) == Ряд(дырка.место) - 1)
		return Место_дырки.СНИЗУ

	if (Ряд(место) == Ряд(дырка.место) && Столбец(место) == Столбец(дырка.место) - 1)
		return Место_дырки.СПРАВА

	if (Ряд(место) == Ряд(дырка.место) && Столбец(место) == Столбец(дырка.место) + 1)
		return Место_дырки.СЛЕВА

	return Место_дырки.ДЫРКИ_РЯДОМ_НЕТ
}

int Кол_во_фишек_не_на_месте() {
	return Фишки.all.size - Фишки.all.filter[номер == место].size
}

int Расстояние_фишки_до_места(int откуда, int куда) {
	return Math.abs(Ряд(откуда) - Ряд(куда)) + Math.abs(Столбец(откуда)-Столбец(куда))
}

int Расстояния_фишек_до_мест() {
	return Фишки.all.stream.mapToInt[Расстояние_фишки_до_места(номер, место)].sum
}

int Поиск_в_ширину() {
	return 0
}
